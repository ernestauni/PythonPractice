-- Create the following tables with the data:
CREATE SCHEMA SGT_test;

CREATE TABLE SGT_test.employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    age INT,
    salary DECIMAL(10, 2),
    department VARCHAR(50)
);

INSERT INTO SGT_test.employees (employee_id, employee_name, age, salary, department)
VALUES
    (1, 'John Doe', 35, 50000.00, 'Sales'),
    (2, 'Jane Smith', 28, 42000.00, 'HR'),
    (3, 'Mike Johnson', 42, 60000.00, 'Finance'),
    (4, 'Emily Brown', 29, 48000.00, 'IT'),
    (5, 'David Lee', 38, 55000.00, 'Sales');

CREATE TABLE SGT_test.customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(50),
    age INT,
    city VARCHAR(50)
);

INSERT INTO SGT_test.customers (customer_id, customer_name, age, city)
VALUES
    (101, 'Alice Johnson', 25, 'New York'),
    (102, 'Bob Smith', 30, 'Los Angeles'),
    (103, 'Eva Lee', 28, 'Chicago'),
    (104, 'Mike Brown', 35, 'Houston'),
    (105, 'Sophia Wang', 22, 'San Francisco');

CREATE TABLE SGT_test.orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_total DECIMAL(10, 2)
);

INSERT INTO SGT_test.orders (order_id, customer_id, order_total)
VALUES
    (1, 101, 120.50),
    (2, 102, 250.75),
    (3, 103, 70.20),
    (4, 101, 80.00),
    (5, 105, 150.30);

CREATE TABLE SGT_test.products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    category VARCHAR(50),
    price DECIMAL(10, 2)
);

INSERT INTO SGT_test.products (product_id, product_name, category, price)
VALUES
    (201, 'Widget A', 'Electronics', 25.50),
    (202, 'Gadget B', 'Electronics', 35.20),
    (203, 'Tool C', 'Hardware', 15.80),
    (204, 'Toy D', 'Toys', 10.99),
    (205, 'Appliance E', 'Home', 75.60);

CREATE TABLE SGT_test.sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    sale_date DATE,
    quantity INT,
    revenue DECIMAL(10, 2)
);

INSERT INTO SGT_test.sales (sale_id, product_id, sale_date, quantity, revenue)
VALUES
    (301, 201, '2023-07-01', 5, 127.50),
    (302, 202, '2023-07-02', 2, 70.40),
    (303, 201, '2023-07-03', 3, 76.50),
    (304, 204, '2023-07-03', 10, 109.90),
    (305, 205, '2023-07-04', 1, 75.60);
   
   

-- 1. **Basic SQL:**
--   - Task: Retrieve all columns from the "employees" table.
SELECT * 
FROM SGT_test.employees;
   
--   - Task: Find the names and ages of all employees whose age is above 30.
SELECT employee_name, age
FROM SGT_test.employees
WHERE age>30;

--   - Task: List the unique cities in the "customers" table.
SELECT DISTINCT city
FROM SGT_test.customers;

--   - Task: Calculate the total number of orders in the "orders" table.
SELECT COUNT(order_id)
FROM SGT_test.orders;

--   - Task: Find the average price of all products in the "products" table.
SELECT AVG(price)
FROM SGT_test.products;


-- 2. **SQL Grouping:**
--   - Task: Calculate the total sales amount for each product in the "sales" table.
SELECT product_id, SUM(revenue)
FROM SGT_test.sales
GROUP BY product_id;

--   - Task: Find the number of customers in each country from the "customers" table.
SELECT city, COUNT(customer_id)
FROM SGT_test.customers
GROUP BY city;

--   - Task: Calculate the average salary for each department in the "employees" table.
SELECT department, AVG(salary)
FROM SGT_test.employees
GROUP BY department;

--   - Task: List the highest and lowest prices for each category in the "products" table.
SELECT category, MIN(price) AS min_price,MAX(price) AS max_price
FROM SGT_test.products
GROUP BY category;

--   - Task: Find the number of orders placed by each customer in the "orders" table.
SELECT customer_id, COUNT(order_id)
FROM SGT_test.orders
GROUP BY customer_id;


-- 3. **SQL Aggregation:**
--   - Task: Calculate the total revenue generated by the company from the "sales" table.
SELECT SUM(revenue) AS total_revenue
FROM SGT_test.sales;

--   - Task: Find the highest salary among all employees in the "employees" table.
SELECT MAX(salary) AS highest_salary
FROM SGT_test.employees;

--   - Task: Calculate the average age of employees in the "employees" table.
SELECT AVG(age) AS avg_age
FROM SGT_test.employees;

--   - Task: Determine the number of distinct products in the "products" table.
SELECT COUNT(DISTINCT product_name) AS products_num
FROM SGT_test.products;

--   - Task: Calculate the total quantity sold for each product in the "sales" table.
SELECT product_id, SUM(quantity)
FROM SGT_test.sales
GROUP BY product_id;

-- 4. **Advanced SQL:**
--   - Task: Retrieve the top 5 employees with the highest salaries from the "employees" table.
SELECT employee_name, salary
FROM SGT_test.employees
ORDER BY salary DESC
LIMIT 5;

--   - Task: Find the names of all customers who have placed orders in the "customers" table.
SELECT DISTINCT customer_name
FROM SGT_test.customers c 
JOIN SGT_test.orders o ON c.customer_id =o.customer_id;

--   - Task: Calculate the running total sales for each month in the "sales" table.
-- there is only one month so far:
SELECT
    sales_year,
    sales_month,
    running_total_sales
FROM (SELECT EXTRACT(YEAR FROM sale_date) AS sales_year, 
	EXTRACT(MONTH FROM sale_date) AS sales_month,
	revenue,
	SUM(revenue) OVER (ORDER BY EXTRACT(YEAR FROM sale_date), EXTRACT(MONTH FROM sale_date)) AS running_total_sales FROM SGT_test.sales) AS t
GROUP BY sales_year, sales_month, running_total_sales
ORDER BY sales_year, sales_month;

--   - Task: Determine the average sales amount over a 3-month sliding window for each product in the "sales" table.
SELECT 
	EXTRACT(YEAR FROM sale_date) AS year,
	EXTRACT(MONTH FROM sale_date) AS month,
	product_id,
	AVG(revenue) OVER (PARTITION BY product_id, EXTRACT(MONTH FROM sale_date) ORDER BY sale_date RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND CURRENT ROW) AS average_sales_amount
FROM SGT_test.sales
ORDER BY product_id, sale_date;

--   - Task: Rank customers based on their total order amounts in the "orders" table.
SELECT customer_id,
	RANK() OVER (ORDER BY SUM(order_total) DESC) AS order_amount_rank
FROM SGT_test.orders
GROUP BY customer_id;



-- 5. **Window Functions in SQL:**
--   - Task: Calculate the cumulative sum of revenue for each product in the "sales" table.
SELECT
	product_id,
	sale_date,
	revenue,
	SUM(revenue) OVER (PARTITION BY product_id ORDER BY sale_date) AS cumulative_sum
FROM SGT_test.sales;

--   - Task: Find the moving average of prices for each product over a 5-day window in the "products" table.
-- there are no dates for products prices

--   - Task: Assign percentile ranks to employees based on their salaries in the "employees" table.
SELECT employee_id,
	employee_name,
	salary,
	PERCENT_RANK() OVER (ORDER BY salary) AS salary_percentile_rank
FROM SGT_test.employees
ORDER BY salary_percentile_rank DESC;

--   - Task: Retrieve the previous salary for each employee in the "employees" table, considering 0 as the default value for the first row.
SELECT employee_id,
	employee_name,
	salary,
	LAG(salary, 1, 0) OVER (ORDER BY employee_id) AS previous_salary
FROM SGT_test.employees;

--   - Task: Calculate the sum of revenue for each product within a 2-day window, including the current row, in the "sales" table.
SELECT product_id,
	sale_date,
	SUM(revenue) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS revenue_2_day
FROM SGT_test.sales;
